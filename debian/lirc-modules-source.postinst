#!/bin/sh
set -e

check_config_file ()
{
  #Make sure that all variables are there
  for VAR in LIRC_MODULES \
        LIRC_IT87_CFLAGS \
		LIRC_PARALLEL_PORT LIRC_PARALLEL_IRQ LIRC_PARALLEL_TIMER \
  		LIRC_SERIAL_PORT LIRC_SERIAL_IRQ LIRC_SERIAL_CFLAGS \
		LIRC_SIR_PORT LIRC_SIR_IRQ LIRC_SIR_CFLAGS
  do
    if ! grep -q "^$VAR\>" "$1"; then
      echo "$VAR=\"UNCONFIGURED\"" >> "$1"
    fi
  done

}
save_it87_conf ()
{
	db_get $package/it87_type
	if [ "$RET" = "DigiMatrix" ];then
	  LIRC_IT87_CFLAGS=" -DLIRC_IT87_DIGIMATRIX";
	fi

	tmpfile=`tempfile`
	sed \
		-e "s/^\(LIRC_IT87_CFLAGS\)=.*/\1=\"$LIRC_IT87_CFLAGS\"/" \
			"$1" > "$tmpfile"
	mv "$tmpfile" "$1"
}
save_parallel_conf ()
{
	db_get $package/parallel_irq
	LIRC_PARALLEL_IRQ="$RET"
	db_get $package/parallel_port
	LIRC_PARALLEL_PORT="$RET"
	db_get $package/parallel_timer
	LIRC_PARALLEL_TIMER="$RET"

	tmpfile=`tempfile`
	sed \
	    -e "s/^\(LIRC_PARALLEL_IRQ\)=.*/\1=\"$LIRC_PARALLEL_IRQ\"/" \
	    -e "s/^\(LIRC_PARALLEL_PORT\)=.*/\1=\"$LIRC_PARALLEL_PORT\"/" \
	    -e "s/^\(LIRC_PARALLEL_TIMER\)=.*/\1=\"$LIRC_PARALLEL_TIMER\"/" \
		"$1" > "$tmpfile"
	mv "$tmpfile" "$1"
}
save_serial_conf ()
{
	db_get $package/serial_type
	if [ "$RET" != "Other" ];then
	  LIRC_SERIAL_CFLAGS="$LIRC_SERIAL_CFLAGS -DLIRC_SERIAL_$RET";
	fi
	db_get $package/serial_transmitter
	if [ "$RET" = "true" ];then
	  LIRC_SERIAL_CFLAGS="$LIRC_SERIAL_CFLAGS -DLIRC_SERIAL_TRANSMITTER";
	fi
	db_get $package/serial_softcarrier
	if [ "$RET" = "true" ];then
	  LIRC_SERIAL_CFLAGS="$LIRC_SERIAL_CFLAGS -DLIRC_SERIAL_SOFTCARRIER";
	fi
	db_get $package/serial_irq
	LIRC_SERIAL_IRQ="$RET"
	db_get $package/serial_port
	LIRC_SERIAL_PORT="$RET"

	tmpfile=`tempfile`
	sed \
		-e "s/^\(LIRC_SERIAL_IRQ\)=.*/\1=\"$LIRC_SERIAL_IRQ\"/" \
		-e "s/^\(LIRC_SERIAL_PORT\)=.*/\1=\"$LIRC_SERIAL_PORT\"/" \
		-e "s/^\(LIRC_SERIAL_CFLAGS\)=.*/\1=\"$LIRC_SERIAL_CFLAGS\"/" \
			"$1" > "$tmpfile"
	mv "$tmpfile" "$1"
}
save_sir_conf ()
{
	db_get $package/sir_type
	if [ "$RET" != "Other" ];then
		LIRC_SIR_CFLAGS="$LIRC_SIR_CFLAGS -DLIRC_SIR_$RET";
	fi
	db_get $package/sir_irq
	LIRC_SIR_IRQ="$RET"
	db_get $package/sir_port
	LIRC_SIR_PORT="$RET"

	tmpfile=`tempfile`
	sed \
		-e "s/^\(LIRC_SIR_IRQ\)=.*/\1=\"$LIRC_SIR_IRQ\"/" \
		-e "s/^\(LIRC_SIR_PORT\)=.*/\1=\"$LIRC_SIR_PORT\"/" \
		-e "s/^\(LIRC_SIR_CFLAGS\)=.*/\1=\"$LIRC_SIR_CFLAGS\"/" \
			"$1" > "$tmpfile"
	mv "$tmpfile" "$1"
}

. /usr/share/debconf/confmodule
db_version 2.0

package=lirc-modules-source

if [ "$1" = "configure" ]; then

  newfile=`tempfile`
  cat /usr/share/lirc/lirc-modules-source.conf.tpl > "$newfile"

  check_config_file "$newfile"

  db_get $package/drivers
  DRIVERS=$RET

  tmpfile=`tempfile`
  sed \
  	-e "s/^\(LIRC_MODULES\)=.*/\1=\"$DRIVERS\"/" \
		"$newfile" > "$tmpfile"
  mv "$tmpfile" "$newfile"

  #it87 configuration
  if expr "$DRIVERS" : '.*\<it87\>' > /dev/null
  then
  	save_it87_conf "$newfile"
  fi

  #Parallel configuration
  if expr "$DRIVERS" : '.*\<parallel\>' > /dev/null
  then
  	save_parallel_conf "$newfile"
  fi

  #Serial configuration
  if expr "$DRIVERS" : '.*\<serial\>' > /dev/null
  then
  	save_serial_conf "$newfile"
  fi

  #SIR configuration
  if expr "$DRIVERS" : '.*\<sir\>' > /dev/null
  then
  	save_sir_conf "$newfile"
  fi

  if [ -f /etc/lirc/$package.conf ]; then
	/usr/bin/ucf --debconf-ok --three-way "$newfile" /etc/lirc/lirc-modules-source.conf
	rm "$newfile"
  else
  	mv "$newfile" /etc/lirc/lirc-modules-source.conf
  fi
fi

################################
## Informal module building

if [ "$1" = "configure" ]; then
  db_get $package/do-build
  if $RET ; then
    db_get $package/kernel-source
    tar -xzf /usr/src/lirc-modules.tar.gz -C /usr/src/
    cd /usr/src/modules/lirc/
    BUILD_OUTPUT=`mktemp /tmp/lirc-kernel-source.XXXXXX`
    echo "Building kernel modules ... (output -> $BUILD_OUTPUT)"
    if ! make clean debconf install KSRC="$RET" > $BUILD_OUTPUT 2>&1 
    then
	echo "##############################################"
	echo "##### Couldn't build LIRC kernel modules #####"
	echo "##############################################"
    	db_reset $package/do-build || true
    	db_reset $package/kernel-source || true
	db_reset $package/drivers || true
    else
	if ! make depmod KSRC="$RET" >> $BUILD_OUTPUT 2>&1
	then
		echo "################################################"
		echo "## As hard I tried I cound't calculate module ##"
		echo "## depencencies, please run depmod yourself.  ##"
		echo "## Apart from that everithing when right.     ##"
		echo "################################################"
	else
	    	echo "Modules succesfully built. Removing $BUILD_OUTPUT"
		rm $BUILD_OUTPUT
	fi
    fi
    cd $OLDPWD
  fi
fi
db_stop

#DEBHELPER#

